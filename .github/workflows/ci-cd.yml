name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: lovable_clone_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run backend tests
      run: |
        cd backend
        npm run test
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/lovable_clone_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
        NODE_ENV: test

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test

    - name: Run security audit
      run: |
        cd backend && npm audit --audit-level high
        cd ../frontend && npm audit --audit-level high

    - name: Build backend
      run: |
        cd backend
        npm run build

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags
        cd k8s/environments/staging
        kustomize edit set image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        kustomize edit set image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
        
        # Apply configurations
        kubectl apply -k .
        
        # Wait for rollout
        kubectl rollout status deployment/backend -n lovable-clone-staging --timeout=300s
        kubectl rollout status deployment/frontend -n lovable-clone-staging --timeout=300s

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Wait for services to be ready
        kubectl wait --for=condition=available deployment/backend -n lovable-clone-staging --timeout=300s
        kubectl wait --for=condition=available deployment/frontend -n lovable-clone-staging --timeout=300s
        
        # Get service URL
        BACKEND_URL=$(kubectl get service backend-service -n lovable-clone-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run basic health checks
        curl -f http://$BACKEND_URL:3000/health || exit 1
        
        echo "Staging deployment successful!"

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Create backup before deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        # Run backup script
        kubectl create job --from=cronjob/backup-job backup-pre-deploy-$(date +%s) -n lovable-clone
        
        # Wait for backup to complete
        kubectl wait --for=condition=complete job/backup-pre-deploy-$(date +%s) -n lovable-clone --timeout=600s

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        
        # Store current deployment for rollback
        kubectl get deployment backend -n lovable-clone -o yaml > backend-rollback.yaml
        kubectl get deployment frontend -n lovable-clone -o yaml > frontend-rollback.yaml
        
        # Update image tags
        cd k8s/environments/production
        kustomize edit set image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        kustomize edit set image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
        
        # Apply configurations with rolling update
        kubectl apply -k .
        
        # Wait for rollout
        kubectl rollout status deployment/backend -n lovable-clone --timeout=600s
        kubectl rollout status deployment/frontend -n lovable-clone --timeout=600s

    - name: Run production health checks
      id: health-check
      run: |
        export KUBECONFIG=kubeconfig
        
        # Wait for services to be ready
        kubectl wait --for=condition=available deployment/backend -n lovable-clone --timeout=300s
        kubectl wait --for=condition=available deployment/frontend -n lovable-clone --timeout=300s
        
        # Get service URL
        BACKEND_URL=$(kubectl get service backend-service -n lovable-clone -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run comprehensive health checks
        curl -f http://$BACKEND_URL:3000/health || exit 1
        curl -f http://$BACKEND_URL:3000/api/health || exit 1
        
        # Check database connectivity
        kubectl exec deployment/backend -n lovable-clone -- node -e "
          const { PrismaClient } = require('@prisma/client');
          const prisma = new PrismaClient();
          prisma.\$connect().then(() => {
            console.log('Database connection successful');
            process.exit(0);
          }).catch((e) => {
            console.error('Database connection failed:', e);
            process.exit(1);
          });
        "
        
        echo "Production deployment successful!"

    - name: Rollback on failure
      if: failure() && steps.health-check.outcome == 'failure'
      run: |
        export KUBECONFIG=kubeconfig
        
        echo "Health checks failed, rolling back..."
        
        # Rollback deployments
        kubectl apply -f backend-rollback.yaml
        kubectl apply -f frontend-rollback.yaml
        
        # Wait for rollback
        kubectl rollout status deployment/backend -n lovable-clone --timeout=300s
        kubectl rollout status deployment/frontend -n lovable-clone --timeout=300s
        
        echo "Rollback completed"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          STATUS="✅ SUCCESS"
          COLOR="good"
        else
          STATUS="❌ FAILED"
          COLOR="danger"
        fi
        
        if [ ! -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "attachments": [{
                "color": "'$COLOR'",
                "title": "Production Deployment '$STATUS'",
                "fields": [
                  {"title": "Repository", "value": "${{ github.repository }}", "short": true},
                  {"title": "Branch", "value": "${{ github.ref_name }}", "short": true},
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "Author", "value": "${{ github.actor }}", "short": true}
                ]
              }]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi