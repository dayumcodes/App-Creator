// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  username     String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  projects           Project[]
  collaborations     ProjectCollaborator[]
  invitedCollabs     ProjectCollaborator[] @relation("InvitedBy")
  sessions           CollaborationSession[]
  events             CollaborationEvent[]
  chatMessages       ProjectChatMessage[]
  
  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user            User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  files           ProjectFile[]
  prompts         PromptHistory[]
  versions        ProjectVersion[]
  changes         FileChange[]
  deployments     Deployment[]
  collaborators   ProjectCollaborator[]
  sessions        CollaborationSession[]
  events          CollaborationEvent[]
  chatMessages    ProjectChatMessage[]
  
  @@map("projects")
}

model ProjectFile {
  id        String   @id @default(cuid())
  projectId String
  filename  String
  content   String
  type      FileType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, filename])
  @@map("project_files")
}

model PromptHistory {
  id           String   @id @default(cuid())
  projectId    String
  prompt       String
  response     String
  filesChanged String[]
  createdAt    DateTime @default(now())
  
  // Relations
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("prompt_history")
}

model ProjectVersion {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relations
  project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  snapshots   FileSnapshot[]
  
  @@map("project_versions")
}

model FileSnapshot {
  id        String   @id @default(cuid())
  versionId String
  filename  String
  content   String
  type      FileType
  createdAt DateTime @default(now())
  
  // Relations
  version   ProjectVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
  
  @@unique([versionId, filename])
  @@map("file_snapshots")
}

model FileChange {
  id        String     @id @default(cuid())
  projectId String
  filename  String
  oldContent String?
  newContent String
  changeType ChangeType
  createdAt DateTime   @default(now())
  
  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("file_changes")
}

enum FileType {
  HTML
  CSS
  JS
  JSON
  TS
  TSX
  JSX
}

model Deployment {
  id            String           @id @default(cuid())
  projectId     String
  platform      DeploymentPlatform
  status        DeploymentStatus @default(PENDING)
  url           String?
  customDomain  String?
  buildCommand  String?
  outputDir     String?
  envVars       Json?
  errorMessage  String?
  deploymentId  String?          // Platform-specific deployment ID
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relations
  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("deployments")
}

enum ChangeType {
  CREATE
  UPDATE
  DELETE
}

enum DeploymentPlatform {
  NETLIFY
  VERCEL
  GITHUB_PAGES
}

enum DeploymentStatus {
  PENDING
  BUILDING
  SUCCESS
  FAILED
  CANCELLED
}

model ProjectCollaborator {
  id         String      @id @default(cuid())
  projectId  String
  userId     String
  role       ProjectRole @default(VIEWER)
  invitedBy  String
  invitedAt  DateTime    @default(now())
  acceptedAt DateTime?
  isActive   Boolean     @default(false)
  
  // Relations
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviter    User    @relation("InvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@map("project_collaborators")
}

model CollaborationSession {
  id         String    @id @default(cuid())
  projectId  String
  userId     String
  socketId   String    @unique
  isActive   Boolean   @default(true)
  lastSeen   DateTime  @default(now())
  cursor     Json?
  activeFile String?
  
  // Relations
  project    Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  events     CollaborationEvent[]
  
  @@index([projectId, isActive])
  @@map("collaboration_sessions")
}

model CollaborationEvent {
  id        String                   @id @default(cuid())
  projectId String
  userId    String
  sessionId String
  eventType CollaborationEventType
  data      Json
  timestamp DateTime                 @default(now())
  
  // Relations
  project   Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  session   CollaborationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([projectId, timestamp])
  @@map("collaboration_events")
}

model ProjectChatMessage {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  message   String
  timestamp DateTime @default(now())
  isEdited  Boolean  @default(false)
  editedAt  DateTime?
  
  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([projectId, timestamp])
  @@map("project_chat_messages")
}

enum ProjectRole {
  OWNER
  EDITOR
  VIEWER
}

enum CollaborationEventType {
  USER_JOIN
  USER_LEAVE
  CURSOR_MOVE
  TEXT_CHANGE
  FILE_CHANGE
  CHAT_MESSAGE
}
